theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename, path = output_path)
# adding some temporary stuff on
pcoa(matrix, correction="none", rn=NULL)
## S3 method for class 'pcoa'
biplot(x, Y=NULL, plot.axes = c(1,2), dir.axis1=1,
dir.axis2=1, rn=NULL, main=NULL, ...)
}
}
library(ggplot2)
library(ggcorrplot)
library(reshape)
library(stringr)
library(ape)
input_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/Output"
output_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/HeatMaps"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename, path = output_path)
# adding some temporary stuff on
pcoa(matrix, correction="none", rn=NULL)
## S3 method for class 'pcoa'
biplot(x, Y=NULL, plot.axes = c(1,2), dir.axis1=1,
dir.axis2=1, rn=NULL, main=NULL)
}
}
library(ggplot2)
library(ggcorrplot)
library(reshape)
library(stringr)
library(ape)
input_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/Output"
output_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/HeatMaps"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename, path = output_path)
# adding some temporary stuff on
res <- pcoa(matrix, correction="none", rn=NULL)
res$values
biplot(res)
}
}
library(ggplot2)
library(ggcorrplot)
library(reshape)
library(stringr)
library(ape)
input_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/Output"
output_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/HeatMaps"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename, path = output_path)
# adding some temporary stuff on
res <- pcoa(matrix, correction="none", rn=NULL)
biplot(res)
}
}
library(ggplot2)
library(ggcorrplot)
library(reshape)
library(stringr)
library(ape)
input_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/Output"
output_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/HeatMaps"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename, path = output_path)
# adding some temporary stuff on producing pcoa plot
res <- pcoa(matrix, correction="none", rn=NULL)
ggplot(res, aes(x=pcoA1 , y = pcoA2))
biplot(res)
}
}
library(ggplot2)
library(ggcorrplot)
library(reshape)
library(stringr)
library(ape)
input_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/Output"
output_path <- "/Users/phillipcompeau/Documents/GitHub/PreCollege2020/Module\ 1\ --\ Metagenomics/CodeSolutions/Metagenomics/GenerateMatrices/HeatMaps"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename, path = output_path)
# adding some temporary stuff on producing pcoa plot
res <- pcoa(matrix, correction="none", rn=NULL)
ggplot(as.data.frame(res), aes(x=pcoA1 , y = pcoA2))
biplot(res)
}
}
# Clear the working space
# This isn't necessary but is a good habit
rm(list = ls())
library(tprstats)
tprstats::setup()
#   Set working directory and packages
# Clear the working space
rm(list = ls())
# Load the packages, ignore warnings.
library(tprstats)
tprstats::setup()
alpha = 0.02
mu = 120
sigma = 20
n = 25
z = 1.96
lower = mu - z * sigma/sqrt(n)
upper = mu + z * sigma/sqrt(n)
library(readxl)
PC_Data <- read_excel("Box/Documents/Tepper/MBA Courses/2021-2022/Mini 3/Statistical Decision Making/Assignments/Data/PC_Data.xlsx")
View(PC_Data)
# Plot control chart
controlChart(PC_Data$performance,mu,sigma,n,alpha)
z = 2.15
pnorm(z)
z2 = 2.24
alpha = 2*(1-pnorm(z2))
alpha # Answer: 0.02509092
alpha = 0.03
qnorm(alpha/2)
qnorm(1-alpha/2)
z = qnorm(1-alpha/2)
z
alpha = 0.03
z = qnorm(1-alpha/2)
mu = 110
sigma = 12
n = 25
sigmax = sigma/xqrt(n)
sigmax = sigma/sqrt(n)
upperBound = mu+z*sigmax
upperBound
hist_CI(PC_Data$performance)
len(PC_Data$performance)
length(PC_Data$performance)
mu = mean(PC_Data$performance)
mu
sigma = stderr(PC_Data$performance)
err = std.error(PC_Data$performance)
stdev = sd(PC_Data$performance)
stdev
length
# 70 elements, so we will use normal
# need to compute a p-value
n = length(PC_Data$performance)
z = 1.96 # 95% CI
sigma = stdev/sqrt(n)
upper = mu + z*sigma
lower = mu - z*sigma
lower, upper
lower
upper
sigma = stdev/sqrt(n)
sigma
hist_CI(Amount)
hist_CI(PC_Data$performance)
lower
upper
#Calculate 97.5th quantile of the standard normal distribution
qnorm(.975)
upperBound = mu+z*sigmax
sigma = stdev/sqrt(n)
sigma
upper = mu + z*sigma
lower = mu - z*sigma
lower # 116.4411
upper # 118.9885
# set number of runs
n = 1000
# Set the seed once
set.seed(33)
# Run the following a few times
coefDrawHAC(EmplReg)
rm(list=ls())
rm(list=ls())
#   Set working directory and packages
# Clear the working space
rm(list = ls())
#   Set working directory and packages
# Clear the working space
rm(list = ls())
# Load the packages, ignore warnings.
library(tprstats)
tprstats::setup()
library(readxl)
Assign_5_Q1 <- read_excel("Box/Documents/Tepper/MBA Courses/2021-2022/Mini 3/Statistical Decision Making/Assignments/HW5/Data/Assign_5_Q1.xlsx")
View(Assign_5_Q1)
#### Exercise 1 -- MATH
Q1Reg=lm(Y~X, data=Assign_5_Q1)
summaryH(Q1Reg)
# b)Bring up a leverage plot for variable X. I suggest you use the following two commands:
par(pty="s")
avPlots(RegQ1,id=FALSE,pch=16,lw=1)
avPlots(Q1Reg,id=FALSE,pch=16,lw=1)
library(readxl)
Brand_Choice <- read_excel("Box/Documents/Tepper/MBA Courses/2021-2022/Mini 3/Statistical Decision Making/Assignments/HW5/Data/Brand_Choice.xlsx")
View(Brand_Choice)
# Now estimate solar sales model using logit
logitBrand = glm(PLBRAND~PRICENAT+PRICEPVT+FEANAT+FEAPVT+DISPNAT+DISPPVT+NEIGHINC, family="binomial", data=Brand_Choice)
summary(logitBrand)
margins(logitBrand)
library(readxl)
AWE_Warranty <- read_excel("Box/Documents/Tepper/MBA Courses/2021-2022/Mini 3/Statistical Decision Making/Assignments/HW5/Data/AWE_Warranty.xlsx")
View(AWE_Warranty)
AWE_logit = glm(Y~X, family="binomial", data=AWE_Warranty)
summary(logitBrand) # must use summary! Not summaryH
margins(AWE_logit)
library(readxl)
Office_Buildings <- read_excel("Box/Documents/Tepper/MBA Courses/2021-2022/Mini 3/Statistical Decision Making/Assignments/HW5/Data/Office_Buildings.xlsx")
View(Office_Buildings)
hist(Office_Buildings$SALE_PRICE)
hist(Office_Buildings$log(SALE_PRICE)
hist(Office_Buildings$log(SALE_PRICE))
hist(log(Office_Buildingslog$SALE_PRICE))
hist(log(Office_Buildings$SALE_PRICE))
hist(Office_Buildings$RBA)
hist(log(Office_Buildings$RBA))
BldgGT25=subset(Office_Buildings,Office_Buildings$NUM_BLDGS>25)
BuildReg1=lm(log(SALE_PRICE)~AG10T20+AG20T30+AG30T40+AGEOVER40+AMENITIES +CLASS_B+CLASS_C+ENERGYSTAR+LEED+log(RBA)+RENOVATED+log(STORIES) +YEAR+factor(ID),
data = BldgGT25)
summaryH(BuildReg1)
View(Q1Reg)
View(logitBrand)
library(readxl)
Taxi_Delivery <- read_excel("Box/Documents/Tepper/MBA Courses/2021-2022/Mini 3/Statistical Decision Making/Assignments/HW5/Data/Taxi_Delivery.xlsx")
View(Taxi_Delivery)
DeliveryReg = lm(TIME~BIZ+LUFT+OBUR, data=Taxi_Delivery)
summaryH(BuildReg1)
summaryH(DeliveryReg)
DeliveryReg2 = lm(TIME~BIZ+LUFT+OBUR+LUFT*BIZ+OBUR*BIZ, data=Taxi_Delivery)
summaryH(DeliveryReg2)
#   Set working directory and packages
# Clear the working space
rm(list = ls())
# Load the packages, ignore warnings.
library(tprstats)
tprstats::setup()
library(readxl)
AWE_Warranty <- read_excel("Downloads/AWE_Warranty.xlsx")
View(AWE_Warranty)
library(readxl)
Office_Buildings <- read_excel("Downloads/Office_Buildings.xlsx")
View(Office_Buildings)
Observation=seq(1,1000)
AWE_Quiz=subset(AWE_Warranty,Observation<901)
AWE_1 = glm(Y~X, family="binomial", data=AWE_Warranty)
summary(AWE_1)
margins(AWE_1)
AWE_2 = glm(Y~X+X^2, family="binomial", data=AWE_Warranty)
summary(AWE_2)
AWE_1 = glm(Y~X, family="binomial", data=AWE_Quiz)
summary(AWE_1)
margins(AWE_1)
summary(AWE_1)
margins(AWE_1)
AWE_2 = glm(Y~X+X^2, family="binomial", data=AWE_Quiz)
summary(AWE_2)
AWE_2 = glm(Y~X+X^2, family="binomial", data=AWE_Quiz)
summary(AWE_2)
AWE_2 = lm(Y~X+X^2, family="binomial", data=AWE_Quiz)
summary(AWE_2)
AWE_2 = lm(Y~X+X^2,  data=AWE_Quiz)
summaryH(AWE_2)
AWE_2 = glm(Y~X+X*X, family="binomial", data=AWE_Quiz)
summary(AWE_2)
AWE_2 = glm(Y~X+X^2, family="binomial", data=AWE_Quiz)
summary(AWE_2)
AWE_2 = glm(Y~X+I(X^2), family="binomial", data=AWE_Quiz)
summary(AWE_2)
BldgGT27=subset(Office_Buildings,Office_Buildings$NUM_BLDGS>=27)
BuildRegQ=lm(log(SALE_PRICE)~AG10T20+AG20T30+AG30T40+AGEOVER40+AMENITIES
+CLASS_A+CLASS_B+ENERGYSTAR+log(RBA)+RENOVATED+YEAR+factor(ID), data = BldgGT27)
summaryH(BuildRegQ)
LogitRen=glm(RENOVATED~CLASS_A+CLASS_B+AGE+factor(ID), family="binomial", data=Office_Buildings)
summary(LogitRen)
library(ggplot2)
library(ggcorrplot)
library(reshape)
library(stringr)
library(ape) #ape library to compute PCoA of our matrix
setwd("~/go/src/Metagenomics")
simpsonTable <- read.csv(file="Matrices/SimpsonMatrix.csv")
simpsonColumns <- data.frame(simpsonTable)
# Add column to our data frame to represent the season
Season <- sub("\\_.*", "", simpsonColumns$Sample) # parse out just the season from sample name
cbind(simpsonColumns, Season) # adding column
# Now we plot box plots where we have evenness lumped by season.
ggplot(simpsonColumns, aes(x=Season, y=SimpsonsIndex, fill=Season)) + geom_boxplot() +ggtitle("Simpson's Index over season")
ggsave("Plots/SimpsonsBoxPlots.png")
# Read in the file and process the table.
table <- read.csv(file="Matrices/BrayCurtisBetaDiversityMatrix.csv")
# trim the first column out because it only contains names
table <- table[-c(1)]
matrix <- as.matrix(table)
# the following code is just all the technical stuff to build a heatmap out of the distance matrix.
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 8,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 8,face = "bold")) +
ggtitle("Bray Curtis Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
ggsave("Plots/BrayCurtisHeatMap.png")
# Let's do all this again for Jaccard
# Read in the file and process the table.
table <- read.csv(file="Matrices/JaccardBetaDiversityMatrix.csv")
# trim the first column out because it only contains names
table <- table[-c(1)]
matrix <- as.matrix(table)
# the following code is just all the technical stuff to build a heatmap out of the distance matrix.
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 8,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 8,face = "bold")) +
ggtitle("Jaccard Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
ggsave("Plots/JaccardHeatMap.png")
# First, Bray Curtis
# Read in the file and process the table.
table2 <- read.csv(file="Matrices/BrayCurtisBetaDiversityMatrix.csv")
#trim the first column out because it only contains names
table2 <- table2[-c(1)]
table2 <- table2[, -50] # trim out weird extra column at end of the matrix file
matrix2 <- as.matrix(table2)
pcoa_data <- pcoa(matrix2, correction="none", rn=NULL)
pcoa_vectors <- data.frame(pcoa_data$vectors)
colnames(table2)
# Add column to our data frame to represent the season
Season2 <- sub("\\_.*", "", colnames(table2)) # parse out just the season from sample name
cbind(pcoa_vectors, Season2) # adding column
# Now, plot the data, colored by season.
ggplot(pcoa_vectors, aes(x=Axis.1, y=Axis.2, color=Season2)) + geom_point()
ggsave("Plots/BrayCurtisPCoA.png")
# Read in the file and process the table.
table2 <- read.csv(file="Matrices/JaccardBetaDiversityMatrix.csv")
#trim the first column out because it only contains names
table2 <- table2[-c(1)]
table2 <- table2[, -50] # trim out weird extra column at end of the matrix file
matrix2 <- as.matrix(table2)
pcoa_data <- pcoa(matrix2, correction="none", rn=NULL)
pcoa_vectors <- data.frame(pcoa_data$vectors)
colnames(table2)
# Add column to our data frame to represent the season
Season2 <- sub("\\_.*", "", colnames(table2)) # parse out just the season from sample name
cbind(pcoa_vectors, Season2) # adding column
# Now, plot the data, colored by season.
ggplot(pcoa_vectors, aes(x=Axis.1, y=Axis.2, color=Season2)) + geom_point()
ggsave("Plots/JaccardPCoA.png")
library(ggplot2)
library(ggcorrplot)
library(reshape)
library(stringr)
library(ape) #ape library to compute PCoA of our matrix
